;Develop an assembly program that integrates keyboard interrupts (interrupt 9h) along with timer
;interrupts (interrupt 8h), to create an interactive speed-controlled game. The program should
;encompass the following features:
;1. Character Movement: Present a character on the screen that continuously moves in a specified
;direction, initially from left to right.
;2. User Control: Enable the user to influence the direction of the character using specific keys: "A" for
;left, "D" for right, "S" for down, and "W" for up.
;3. Timer Interaction: Implement a timer that updates the character's position every second. If the user
;doesn't press any keys within a 5-second interval, increase the character's speed by 3 tick counts.
;4. Game Over Condition: Set a game-over condition when the tick count reaches 3 or 0. Display a
;relevant message and terminate the program.
;5. Termination: Provide a key (e.g., "ESC") for the user to terminate the program.

[org 0x100]
jmp start

oldisr: dd 0
old: dd 0
ticks:dw 0
seconds: dw 0
timerflag1: dw 0
timerflag2: dw 0
timerflag3: dw 0
timerflag4: dw 0
start_pos: dw 2000
c1: dw 0
count: dw 0
num_ticks: dw 18
chk1: dw 0
chk2: dw 0
chk3: dw 0
chk4: dw 0
msg1: db 'GAME OVER'
size: dw 9


print_str:
    push bp
    mov bp, sp
    push es
    push di
    push si
    push ax
    push bx
    push cx
    push dx

    mov ax, 0xb800
    mov es, ax

    mov si, [bp+6]     ;msg
    mov cx, [bp+4]     ;length/size of the msg
    mov al, 80
    mov dl, 12
    mul byte dl     ;multuply ax by 80
    add ax, 22      ;adding column
    shl ax, 1           ;multiply by 2
    mov di, ax
    mov ah, 0x07     ;loading attribute
    next:
       lodsb
       stosw
    loop next

    popa
    ret 10


prnt_letter:
push bp
mov bp, sp

mov ax, 0xb800
mov es, ax

mov ah, 0x07
mov al, 'B'
cmp word [c1], 0
jne agay
mov di, [start_pos]

agay:
mov word[es:di], 0x0720
cmp word[cs:timerflag1], 0
jne agay1
cmp word[cs:timerflag2], 0
jne agay1
cmp word[cs:timerflag3], 0
jne agay1
cmp word[cs:timerflag4], 0
jne agay1
add di, 2
mov word[es:di], ax
inc word [c1]

agay1:
cmp word[cs:timerflag1], 1
jne jao
sub di, 2
mov word[es:di], ax
inc word [c1]

jao:
;mov word[es:di], 0x0720
cmp word[cs:timerflag2], 1
jne jao1
add di, 2
mov word[es:di], ax
inc word [c1]

jao1:
;mov word[es:di], 0x0720
cmp word[cs:timerflag3], 1
jne jao2
add di, 160
mov word[es:di], ax
inc word [c1]

jao2:
;mov word[es:di], 0x0720
cmp word[cs:timerflag4], 1
jne jao3
sub di, 160
mov word[es:di], ax
inc word [c1]

jao3:
pop bp
ret

timer:
push ax

cmp word[cs:num_ticks], 3
jne chalo
call clrscr
mov ax, msg1
push ax
push word [size]
call print_str
jmp near exittimer

chalo:
inc word[cs:ticks]
mov ax, [cs:num_ticks]
cmp word[cs:ticks], ax
jne exittimer

mov word[cs:ticks], 0
call prnt_letter
check:
cmp word[cs:chk1], 1
je on
cmp word[cs:chk2], 1
je on
cmp word[cs:chk3], 1
je on
cmp word[cs:chk4], 1
jne agayko
on:
mov word[cs:count], 0
mov word[cs:chk1], 0
mov word[cs:chk2], 0
mov word[cs:chk3], 0
mov word[cs:chk4], 0
jmp exittimer

agayko:
inc word[cs:count]
cmp word[cs:count], 5
jne exittimer
sub word[cs:num_ticks], 3
mov word[cs:count], 0

exittimer:
mov al, 0x20
out 0x20, al
pop ax
iret


kbisr: 
push ax
push es

in al, 0x60 ; read char from keyboard port
cmp al, 0x1E ; was A pressed
jne nextcmp ; no, try next comparison
mov word [cs:timerflag1], 1
mov word [cs:timerflag2], 0
mov word [cs:timerflag3], 0
mov word [cs:timerflag4], 0
mov word[cs:chk1], 1
jmp exit

nextcmp: 
cmp al, 0x20  ;D
jne nextcmp1 
mov word [cs:timerflag2], 1
mov word [cs:timerflag1], 0
mov word [cs:timerflag3], 0
mov word [cs:timerflag4], 0
mov word[cs:chk2], 1
jmp exit

nextcmp1:
cmp al, 0x1F   ;S
jne nextcmp2
mov word [cs:timerflag2], 0
mov word [cs:timerflag1], 0
mov word [cs:timerflag3], 1
mov word [cs:timerflag4], 0
mov word[cs:chk3], 1
jmp exit

nextcmp2:
cmp al, 0x11   ;W
jne nomatch
mov word [cs:timerflag2], 0
mov word [cs:timerflag1], 0
mov word [cs:timerflag3], 0
mov word [cs:timerflag4], 1
mov word[cs:chk4], 1
jmp exit

nomatch: 
 pop es 
 pop ax 
 jmp far [cs:oldisr]

exit:
mov al, 0x20
out 0x20, al
pop es
pop ax
iret

clrscr:
    push es
    push di
    push ax

    mov ax, 0xb800
    mov es, ax
    mov di, 0
    nextChar:
        mov word[es:di], 0x0720
        add di ,2
        cmp di, 4000
        jnz nextChar
   
    pop ax
    pop di
    pop es
    ret


start:
call clrscr

xor ax, ax
mov es, ax 

mov ax, [es:9*4]
mov [oldisr], ax ; save offset of old routine
mov ax, [es:9*4+2]
mov [oldisr+2], ax ; save segment of old routine
mov ax, [es:8*4]
mov [old], ax ; save offset of old routine
mov ax, [es:8*4+2]
mov [old+2], ax ; save segment of old routine
cli ; disable interrupts
mov word [es:9*4], kbisr 
mov [es:9*4+2], cs
mov word [es:8*4], timer
mov [es:8*4+2], cs
sti ; enable interrupts

l1:
 mov ah, 0 ; service 0 â€“ get keystroke 
 int 0x16 ; call BIOS keyboard service 
 cmp al, 27 ; is the Esc key pressed 
 jne l1 ; if no, check for next key 
 call clrscr
 mov ax, msg1
 push ax
 push word [size]
 call print_str

mov ax, 0x4c00
int 21h
